This paper focuses on exploiting instruction-level parallelism within programs by improvements on multi-issue logic. The author provides a structure called “RUU”, based on Tomasulo’s algorithm, which tackles data dependencies and imprecise interrupts simultaneously. The experiment results are encouraging, reaching an issue rate over 0.7, with a reasonable amount of hardware. Meanwhile, this approach simplifies branch mis-prediction recovery because it intrinsically supports conditional execution and nullifying instructions. 

Back in the 1990s, people realized that pipelined CPU performance is largely impeded by data dependencies and branches. If CPU is multi-issued, it also suffers severely from imprecise interrupts. This is because instruction can complete execution in sequence different from that of they are issued. Complicated hardware is usually required for CPU to recover from conditionally executed instructions. The author’s approach is extended from Tomasulo’s hardware dependency-resolution algorithm. Tomasulo’s algorithm assigns a tag for each register instance, and employs reservation stations for instruction waiting for their operands. Register files would then listen on the result bus for incoming results, gate in the result if tag matches, and reservation stations would issue instructions whose dependencies have been resolved. The author noticed that associating a tag with every register is inefficient, and thus proposed to use a separate tag unit combined with a merged reservation station, forming an intermediate unit called RSTU. To further implement precise interrupts, the author managed RSTU as a circular queue and added commit instructions, proposing RUU. The author evaluated RUU by changing the bypass logic, where he finds that having bypass logic achieves better performance, but also introduces more complicated hardware designs. As the result, the author proposed RUU with limited bypass logic, duplicating only A register files. These organizations were tested on the first 14 Lawrence Livermore loops, which achieved an instruction issue rate of ~0.7, nearly twice of that without a reservation station. The author also stated that because RUU’s commitment design, it is very powerful in nullifying instructions, mitigating performance degradation due to mis-predicted branches. 

The paper proposed a novel organization for multi-issue processors to exploit instruction-level parallelisms. By using RUU which combines reservation stations and tag units and managing them as a circular queue, the author tackles the problems of out-of-order instruction issue and imprecise interrupts together. The experiment results are satisfying. However, the results are based on several ideal assumptions. For example, it is assumed that there are no memory bank conflicts, and the instructions are already in the instruction buffers. We do not know how much better would RUU perform in reality than previous schemes. 
